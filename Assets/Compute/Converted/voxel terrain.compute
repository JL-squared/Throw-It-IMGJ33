
float4x4 matrix_0;
float inj_0;
float inj_1;
float inj_2;
float inj_3;
float inj_4;
float inj_5;
Texture1D _gradient_texture_0_read;
SamplerState sampler_gradient_texture_0_read;
float inj_6;
RWTexture3D<float> voxels_write;
RWTexture3D<float3> colors_write;
RWTexture3D<float2> uvs_write;
int size;
int3 permuationSeed;
int3 moduloSeed;
float3 scale;
float3 offset;
#include "Assets/Terrain/Graph-To-Code/Runtime/Compute/Noises.cginc"
#include "Assets/Terrain/Graph-To-Code/Runtime/Compute/SDF.cginc"
#include "Assets/Terrain/Graph-To-Code/Runtime/Compute/Other.cginc"

float3 ConvertIntoWorldPosition(float3 tahini) {
    //return  (tahini + offset) * scale;
    //return (tahini - 1.5f) * scale + offset;
    return (tahini * scale) + offset;
}

float3 ConvertFromWorldPosition(float3 worldPos) {
    return  (worldPos / scale) - offset;
}

// Morton encoding from
// Stolen from https://github.com/johnsietsma/InfPoints/blob/master/com.infpoints/Runtime/Morton.cs
uint part1By2_32(uint x)
{
    x &= 0x3FF;  // x = ---- ---- ---- ---- ---- --98 7654 3210
    x = (x ^ (x << 16)) & 0xFF0000FF;  // x = ---- --98 ---- ---- ---- ---- 7654 3210
    x = (x ^ (x << 8)) & 0x300F00F;  // x = ---- --98 ---- ---- 7654 ---- ---- 3210
    x = (x ^ (x << 4)) & 0x30C30C3;  // x = ---- --98 ---- 76-- --54 ---- 32-- --10
    x = (x ^ (x << 2)) & 0x9249249;  // x = ---- 9--8 --7- -6-- 5--4 --3- -2-- 1--0
    return x;
}

uint encodeMorton32(uint3 coordinate)
{
    return (part1By2_32(coordinate.z) << 2) + (part1By2_32(coordinate.y) << 1) + part1By2_32(coordinate.x);
}


// taken from the voxels utils class
uint3 indexToPos(uint index)
{
    // N(ABC) -> N(A) x N(BC)
    uint y = index / (size * size);   // x in N(A)
    uint w = index % (size * size);  // w in N(BC)

    // N(BC) -> N(B) x N(C)
    uint z = w / size;// y in N(B)
    uint x = w % size;        // z in N(C)
    return uint3(x, y, z);
}

// defined nodes: 35, depth: 0, index: 0, total lines: 33, argument count: 3 
void Voxel(float3 position, out float voxel, out float3 color) {
	float3 projected_0 = mul(matrix_0, float4(position, 1.0)).xyz;
	float3 projected2_0 = projected_0;
	float projected2_0_swizzled_0 = projected2_0.y;
	float inj_0_func_0 = (-(inj_0));
	float2 projected2_0_swizzled_1 = projected2_0.xz;
	float projected2_0_swizzled_1_fbm_0 = 0.0;
	float projected2_0_swizzled_1_fbm_scale_0 = 1.0;
	float projected2_0_swizzled_1_fbm_amplitude_0 = 1.0;
	[unroll]
	for(uint i = 0; i < 4; i++) {
		float2 projected2_0_swizzled_1_fmb_pos_0 = projected2_0_swizzled_1 * projected2_0_swizzled_1_fbm_scale_0 + hash21(float(i) * 6543.26912) * 2366.5437;
		float2 projected2_0_swizzled_1_fbm_scale_0_swizzled_0 = projected2_0_swizzled_1_fbm_scale_0.xx;
		float2 projected2_0_swizzled_1_fmb_pos_0_op_projected2_0_swizzled_1_fbm_scale_0_swizzled_0_0 = projected2_0_swizzled_1_fmb_pos_0 * projected2_0_swizzled_1_fbm_scale_0_swizzled_0;
		float projected2_0_swizzled_1_fmb_pos_0_op_projected2_0_swizzled_1_fbm_scale_0_swizzled_0_0_noised_0 = (snoise((projected2_0_swizzled_1_fmb_pos_0_op_projected2_0_swizzled_1_fbm_scale_0_swizzled_0_0) * inj_5)) * inj_4;
		float huh_0 = projected2_0_swizzled_1_fmb_pos_0_op_projected2_0_swizzled_1_fbm_scale_0_swizzled_0_0_noised_0;
		float huh_0_op_projected2_0_swizzled_1_fbm_amplitude_0_0 = huh_0 * projected2_0_swizzled_1_fbm_amplitude_0;
		float projected2_0_swizzled_1_fbm_0_op_huh_0_op_projected2_0_swizzled_1_fbm_amplitude_0_0_0 = projected2_0_swizzled_1_fbm_0 + huh_0_op_projected2_0_swizzled_1_fbm_amplitude_0_0;
		projected2_0_swizzled_1_fbm_0 = projected2_0_swizzled_1_fbm_0_op_huh_0_op_projected2_0_swizzled_1_fbm_amplitude_0_0_0;
		projected2_0_swizzled_1_fbm_scale_0 *= inj_2;
		projected2_0_swizzled_1_fbm_amplitude_0 *= inj_3;
	}
	float projected2_0_swizzled_1_fbm_1 = projected2_0_swizzled_1_fbm_0;
	float projected2_0_swizzled_1_fbm_1_gradient_remapped_0 = Remap(projected2_0_swizzled_1_fbm_1, inj_0_func_0, inj_1, 0.0, 1.0);
	float _gradient_texture_0_gradient_0 = _gradient_texture_0_read.SampleLevel(sampler_gradient_texture_0_read, projected2_0_swizzled_1_fbm_1_gradient_remapped_0, 0).x;
	float projected2_0_swizzled_1_fbm_1_gradient_second_remapped_0 = Remap(_gradient_texture_0_gradient_0, 0.0, 1.0, inj_0_func_0, inj_1);
	float _gradient_texture_0_gradient_sampled_0 = projected2_0_swizzled_1_fbm_1_gradient_second_remapped_0;
	float projected2_0_swizzled_0_op__gradient_texture_0_gradient_sampled_0_0 = projected2_0_swizzled_0 + _gradient_texture_0_gradient_sampled_0;
	float projected2_0_swizzled_0_op_inj_6_0 = projected2_0_swizzled_0 / inj_6;
	const float c_0 = 0.5;
	float projected2_0_swizzled_0_op_inj_6_0_op_c_0_0 = projected2_0_swizzled_0_op_inj_6_0 * c_0;
	const float c_1 = 0.5;
	float projected2_0_swizzled_0_op_inj_6_0_op_c_0_0_op_c_1_0 = projected2_0_swizzled_0_op_inj_6_0_op_c_0_0 + c_1;
	float3 projected2_0_swizzled_0_op_inj_6_0_op_c_0_0_op_c_1_0_swizzled_0 = projected2_0_swizzled_0_op_inj_6_0_op_c_0_0_op_c_1_0.xxx;
	voxel = projected2_0_swizzled_0_op__gradient_texture_0_gradient_sampled_0_0;
	color = projected2_0_swizzled_0_op_inj_6_0_op_c_0_0_op_c_1_0_swizzled_0;
}


#pragma kernel CSVoxel
[numthreads(8, 8, 8)]
// Name: CSVoxel, Scope name: Voxel, Scope index: 0, Outputs: 2, Arguments: 3
void CSVoxel(uint3 id : SV_DispatchThreadID) {
    uint3 remapped = uint3(id.xyz);
    //float3 position = (float3(remapped * 1) + offset) * scale
    float3 position = ConvertIntoWorldPosition(float3(remapped) * 1);
    float voxel;
    float3 color;
    Voxel(position,voxel,color);
    voxels_write[indexToPos(encodeMorton32(id.xyz)).xzy] = voxel;
    colors_write[indexToPos(encodeMorton32(id.xyz)).xzy] = color;

}