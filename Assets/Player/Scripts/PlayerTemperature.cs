using System.Collections.Generic;
using UnityEngine;

public class PlayerTemperature : PlayerBehaviour {
    // How fast we accumulate temp difference into the body
    // Percentage per tick (so 0.04%)
    public float reachSpeedIncrease = 0.04f;

    // How fast we dissipate temp difference into the surrounding environment.
    // Percentage per tick (so 0.0025%)
    public float reachSpeedDecrease = 0.0025f;

    // Some virtual offset that takes care of the body heat that's generated by the user
    // You could write a full complex thermal simulation system with proper units but a simplified system like this works
    public float selfTempOffset = 20f;

    // Max range of values around the stable point that we will sigmoidate
    public float stableTempValuesRange = 2f;

    // Stable point temperature
    public float stablePointTemp = 37f;

    public float bodyTemp;
    public float outsideTemp;
    public HashSet<HeatSource> sources;

    private void Start() {
        sources = new HashSet<HeatSource>();
        UpdateValues();
    }

    private void FixedUpdate() {
        UpdateValues();
    }

    // Outside temp is weather temperature + external sources temperature (like campfires or other warmth sources)
    private void UpdateOutsideTemp() {
        outsideTemp = GameManager.Instance.weatherManager.GetOutsideTemperature();
        foreach (var source in sources) {
            float sourceTemp = source.sourceTemperature;
            float distance = Vector3.Distance(transform.position, source.transform.position);

            if (distance <= source.minRangeRadius) {
                outsideTemp += sourceTemp * Time.fixedDeltaTime;
            } else {
                // need to start doing invsquare stuff from the radius itself
                float offsetDistance = distance - source.minRangeRadius + 1;
                float invSquareLaw = (offsetDistance * offsetDistance);
                outsideTemp += (sourceTemp / invSquareLaw) * Time.fixedDeltaTime;
            }
        }
    }

    private void UpdateBodyTemp() {
        float transfer = outsideTemp - (bodyTemp - selfTempOffset);
        float speed = transfer > 0.0f ? reachSpeedIncrease : reachSpeedDecrease;
        float change = speed * transfer * Time.fixedDeltaTime;
        bodyTemp += change;

        bodyTemp = (Utils.Sigmoid((bodyTemp - stablePointTemp) / stableTempValuesRange) * 2f - 1f) * stableTempValuesRange + stablePointTemp;
    }

    private void UpdateValues() {
        UpdateOutsideTemp();
        UpdateBodyTemp();
        UIScriptMaster.Instance.temperatureDisplay.SetDisplay(bodyTemp);
    }
}
